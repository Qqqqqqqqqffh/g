name: Benchmark Runner

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]

jobs:
  run-benchmark:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      actions: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0

    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind sqlite3 python3-pip
        pip install requests

    - name: Compile optimized (save logs)
      run: |
        cmake . > compile_stdout.log 2> compile_stderr.log
        make >> compile_stdout.log 2>> compile_stderr.log

    - name: Run cuda-memcheck
      run: |
        cuda-memcheck ./main > cuda_memcheck.log 2>&1 || true

    - name: Run valgrind check
      run: |
        valgrind --leak-check=full --error-exitcode=1 ./main > valgrind_stdout.log 2> valgrind_stderr.log || true

    - name: Run optimized program (measure time)
      id: run_program
      run: |
        start=$(date +%s%N)  # Наносекунды
        ./main > run_stdout.log 2> run_stderr.log
        end=$(date +%s%N)
        duration_ns=$((end - start))
        duration_micro=$(echo "scale=3; $duration_ns / 1000" | bc)
        echo "exec_time=$duration_micro" >> $GITHUB_OUTPUT
        echo "start_time=$start" >> $GITHUB_OUTPUT

    - name: Save result to database
      run: python3 save_result.py ${{ steps.run_program.outputs.exec_time }}
      env:
        GITHUB_ACTOR: ${{ github.actor }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPO: ${{ github.repository }}

    - name: Get Telegram ID
      id: get_telegram_id
      run: |
        github_actor="${{ github.actor }}"
        telegram_id=$(sqlite3 results.db "SELECT telegram_id FROM account_bindings WHERE github_username='$github_actor'")
        if [ -z "$telegram_id" ]; then
          echo "No Telegram ID found for $github_actor"
          echo "telegram_id=0" >> $GITHUB_OUTPUT
        else
          echo "Telegram ID found: $telegram_id"
          echo "telegram_id=$telegram_id" >> $GITHUB_OUTPUT
        fi

    - name: Prepare logs archive
      if: ${{ steps.get_telegram_id.outputs.telegram_id != '0' }}
      run: |
        # Конвертируем время запуска в читаемый формат
        start_time_ns=${{ steps.run_program.outputs.start_time }}
        start_time_sec=$(echo "$start_time_ns / 1000000000" | bc)
        start_time_str=$(date -d @$start_time_sec +"%Y-%m-%d %H:%M:%S UTC")
        

        tar czf logs.tar.gz \
            compile_stdout.log \
            compile_stderr.log \
            run_stdout.log \
            run_stderr.log \
            cuda_memcheck.log \
            valgrind_stdout.log \
            valgrind_stderr.log

        echo "Benchmark run at: $start_time_str" > description.txt
        echo "Duration: ${{ steps.run_program.outputs.exec_time }} μs" >> description.txt
        echo "GitHub Actor: ${{ github.actor }}" >> description.txt
        echo "Repository: ${{ github.repository }}" >> description.txt

    - name: Send logs to Telegram
      if: ${{ steps.get_telegram_id.outputs.telegram_id != '0' }}
      run: python3 telegram_sender.py ${{ steps.get_telegram_id.outputs.telegram_id }}
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Upload logs as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-logs
        path: |
          compile_stdout.log
          compile_stderr.log
          run_stdout.log
          run_stderr.log
          cuda_memcheck.log
          valgrind_stdout.log
          valgrind_stderr.log
