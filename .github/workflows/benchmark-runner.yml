name: Benchmark Runner

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]

jobs:
  run-benchmark:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install dependencies
      run: sudo apt-get install -y git cmake
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind sqlite3 python3-pip curl
        pip install requests

    - name: Compile optimized
      run: |
        cmake . > compile_stdout.log 2> compile_stderr.log
        make >> compile_stdout.log 2>> compile_stderr.log

    - name: Run cuda-memcheck
      run: |
        cuda-memcheck ./main > cuda_memcheck.log 2>&1 || true

    - name: Run valgrind check
      run: |
        valgrind --leak-check=full --error-exitcode=1 ./main > valgrind_stdout.log 2> valgrind_stderr.log || true

    - name: Run optimized program (measure time)
      id: run_program
      run: |
        start=$(date +%s%N)  # Наносекунды
        ./main > run_stdout.log 2> run_stderr.log
        end=$(date +%s%N)
        duration_ns=$((end - start))
        duration_micro=$(echo "scale=3; $duration_ns / 1000" | bc)
        echo "exec_time=$duration_micro" >> $GITHUB_OUTPUT
        echo "start_time=$(date -u +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_OUTPUT

    - name: Get Telegram ID
      id: get_telegram_id
      run: |
        # Получаем данные с сервера Яндекса
        response=$(curl -s "https://your-yandex-server.com/get_binding?github_username=${{ github.actor }}")
        telegram_id=$(echo $response | jq -r '.telegram_id')
        
        if [ "$telegram_id" == "null" ] || [ -z "$telegram_id" ]; then
          echo "No Telegram ID found for ${{ github.actor }}"
          echo "telegram_id=0" >> $GITHUB_OUTPUT
        else
          echo "Telegram ID found: $telegram_id"
          echo "telegram_id=$telegram_id" >> $GITHUB_OUTPUT
        fi

    - name: Prepare logs archive
      if: ${{ steps.get_telegram_id.outputs.telegram_id != '0' }}
      run: |
        # Создаем архив
        tar czf logs.tar.gz \
            compile_stdout.log \
            compile_stderr.log \
            run_stdout.log \
            run_stderr.log \
            cuda_memcheck.log \
            valgrind_stdout.log \
            valgrind_stderr.log
        

        echo "🕒 Время запуска: ${{ steps.run_program.outputs.start_time }} UTC" > description.txt
        echo "⏱ Длительность: ${{ steps.run_program.outputs.exec_time }} μs" >> description.txt
        echo "👤 GitHub: ${{ github.actor }}" >> description.txt
        echo "📦 Репозиторий: ${{ github.repository }}" >> description.txt

    - name: Send logs to Telegram
      if: ${{ steps.get_telegram_id.outputs.telegram_id != '0' }}
      run: python3 telegram_sender.py ${{ steps.get_telegram_id.outputs.telegram_id }}
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        YANDEX_SERVER_URL: "https://your-yandex-server.com"

    - name: Save result to Yandex server
      run: python3 save_result.py ${{ steps.run_program.outputs.exec_time }}
      env:
        YANDEX_SERVER_URL: "https://your-yandex-server.com"
        GITHUB_ACTOR: ${{ github.actor }}

    - name: Upload logs as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-logs
        path: |
          compile_stdout.log
          compile_stderr.log
          run_stdout.log
          run_stderr.log
          cuda_memcheck.log
          valgrind_stdout.log
          valgrind_stderr.log
